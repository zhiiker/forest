(function() {var implementors = {};
implementors["actor_interface"] = [{"text":"impl Freeze for FilterEstimate","synthetic":true,"types":[]},{"text":"impl&lt;'a, BS, V&gt; !Freeze for Array&lt;'a, BS, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, BS, V&gt; Freeze for Map&lt;'a, BS, V&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for ActorVersion","synthetic":true,"types":[]},{"text":"impl Freeze for State","synthetic":true,"types":[]},{"text":"impl Freeze for State","synthetic":true,"types":[]},{"text":"impl Freeze for State","synthetic":true,"types":[]},{"text":"impl Freeze for DealProposal","synthetic":true,"types":[]},{"text":"impl Freeze for DealState","synthetic":true,"types":[]},{"text":"impl Freeze for State","synthetic":true,"types":[]},{"text":"impl&lt;'a, BS&gt; Freeze for BalanceTable&lt;'a, BS&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, BS&gt; !Freeze for DealProposals&lt;'a, BS&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, BS&gt; !Freeze for DealStates&lt;'a, BS&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for MinerInfo","synthetic":true,"types":[]},{"text":"impl Freeze for SectorOnChainInfo","synthetic":true,"types":[]},{"text":"impl Freeze for SectorPreCommitOnChainInfo","synthetic":true,"types":[]},{"text":"impl Freeze for SectorPreCommitInfo","synthetic":true,"types":[]},{"text":"impl Freeze for State","synthetic":true,"types":[]},{"text":"impl Freeze for Deadline","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Partition&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for State","synthetic":true,"types":[]},{"text":"impl Freeze for Claim","synthetic":true,"types":[]},{"text":"impl Freeze for State","synthetic":true,"types":[]},{"text":"impl Freeze for State","synthetic":true,"types":[]},{"text":"impl Freeze for State","synthetic":true,"types":[]}];
implementors["auth"] = [{"text":"impl Freeze for Error","synthetic":true,"types":[]}];
implementors["beacon"] = [{"text":"impl Freeze for DrandPublic","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Schedule&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for BeaconPoint&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for ChainInfo","synthetic":true,"types":[]},{"text":"impl Freeze for BeaconEntryJson","synthetic":true,"types":[]},{"text":"impl !Freeze for DrandBeacon","synthetic":true,"types":[]},{"text":"impl Freeze for MockBeacon","synthetic":true,"types":[]},{"text":"impl Freeze for BeaconEntry","synthetic":true,"types":[]},{"text":"impl Freeze for BeaconEntryJson","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for BeaconEntryJsonRef&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["chain"] = [{"text":"impl Freeze for MINIMUM_BASE_FEE","synthetic":true,"types":[]},{"text":"impl Freeze for IndexToHeadChange","synthetic":true,"types":[]},{"text":"impl&lt;DB&gt; !Freeze for ChainStore&lt;DB&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for LookbackEntry","synthetic":true,"types":[]},{"text":"impl&lt;BS&gt; !Freeze for ChainIndex&lt;BS&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for HeadChange","synthetic":true,"types":[]},{"text":"impl Freeze for EventsPayload","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for HeadChangeJson&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["chain_sync"] = [{"text":"impl !Freeze for BadBlockCache","synthetic":true,"types":[]},{"text":"impl&lt;DB&gt; Freeze for SyncNetworkContext&lt;DB&gt;","synthetic":true,"types":[]},{"text":"impl&lt;DB, TBeacon, V, M&gt; Freeze for ChainSyncer&lt;DB, TBeacon, V, M&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for SyncConfig","synthetic":true,"types":[]},{"text":"impl Freeze for SyncState","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for SyncStage","synthetic":true,"types":[]}];
implementors["conformance_tests"] = [{"text":"impl Freeze for MessageVector","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for ExecuteMessageParams&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for ReplayingRand&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for TestRand","synthetic":true,"types":[]},{"text":"impl Freeze for TestSyscalls","synthetic":true,"types":[]},{"text":"impl Freeze for TipsetVector","synthetic":true,"types":[]},{"text":"impl Freeze for ExecuteTipsetResult","synthetic":true,"types":[]},{"text":"impl Freeze for StateTreeVector","synthetic":true,"types":[]},{"text":"impl Freeze for GenerationData","synthetic":true,"types":[]},{"text":"impl Freeze for MetaData","synthetic":true,"types":[]},{"text":"impl Freeze for PreConditions","synthetic":true,"types":[]},{"text":"impl Freeze for PostConditions","synthetic":true,"types":[]},{"text":"impl Freeze for Selector","synthetic":true,"types":[]},{"text":"impl Freeze for Variant","synthetic":true,"types":[]},{"text":"impl Freeze for RandomnessMatch","synthetic":true,"types":[]},{"text":"impl Freeze for RandomnessRule","synthetic":true,"types":[]},{"text":"impl Freeze for RandomnessKind","synthetic":true,"types":[]},{"text":"impl Freeze for TestVector","synthetic":true,"types":[]}];
implementors["fil_clock"] = [{"text":"impl Freeze for ChainEpochClock","synthetic":true,"types":[]}];
implementors["fil_types"] = [{"text":"impl Freeze for UnpaddedPieceSize","synthetic":true,"types":[]},{"text":"impl Freeze for PaddedPieceSize","synthetic":true,"types":[]},{"text":"impl Freeze for PieceInfo","synthetic":true,"types":[]},{"text":"impl Freeze for Randomness","synthetic":true,"types":[]},{"text":"impl Freeze for StateRoot","synthetic":true,"types":[]},{"text":"impl Freeze for StateInfo0","synthetic":true,"types":[]},{"text":"impl Freeze for TOTAL_FILECOIN","synthetic":true,"types":[]},{"text":"impl Freeze for FIL_RESERVED","synthetic":true,"types":[]},{"text":"impl Freeze for DevnetParams","synthetic":true,"types":[]},{"text":"impl Freeze for StateTreeVersion","synthetic":true,"types":[]},{"text":"impl Freeze for NetworkVersion","synthetic":true,"types":[]},{"text":"impl Freeze for BUILD_TYPE","synthetic":true,"types":[]},{"text":"impl Freeze for RUNNING_NODE_TYPE","synthetic":true,"types":[]},{"text":"impl Freeze for APIVersion","synthetic":true,"types":[]},{"text":"impl Freeze for Version","synthetic":true,"types":[]},{"text":"impl Freeze for BuildType","synthetic":true,"types":[]},{"text":"impl Freeze for NodeType","synthetic":true,"types":[]},{"text":"impl Freeze for QuantSpec","synthetic":true,"types":[]},{"text":"impl Freeze for DeadlineInfo","synthetic":true,"types":[]},{"text":"impl Freeze for SealVerifyInfo","synthetic":true,"types":[]},{"text":"impl Freeze for SealVerifyParams","synthetic":true,"types":[]},{"text":"impl Freeze for SectorID","synthetic":true,"types":[]},{"text":"impl Freeze for RegisteredSealProof","synthetic":true,"types":[]},{"text":"impl Freeze for RegisteredPoStProof","synthetic":true,"types":[]},{"text":"impl Freeze for SectorSize","synthetic":true,"types":[]},{"text":"impl Freeze for SectorInfo","synthetic":true,"types":[]},{"text":"impl Freeze for PoStProof","synthetic":true,"types":[]},{"text":"impl Freeze for WinningPoStVerifyInfo","synthetic":true,"types":[]},{"text":"impl Freeze for WindowPoStVerifyInfo","synthetic":true,"types":[]},{"text":"impl Freeze for OnChainWindowPoStVerifyInfo","synthetic":true,"types":[]},{"text":"impl Freeze for PoStProofJson","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for PoStProofJsonRef&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for SectorInfoJson","synthetic":true,"types":[]},{"text":"impl Freeze for Actor","synthetic":true,"types":[]},{"text":"impl Freeze for Miner","synthetic":true,"types":[]},{"text":"impl Freeze for Template","synthetic":true,"types":[]},{"text":"impl Freeze for ActorType","synthetic":true,"types":[]},{"text":"impl Freeze for MockVerifier","synthetic":true,"types":[]},{"text":"impl Freeze for FullVerifier","synthetic":true,"types":[]}];
implementors["forest"] = [{"text":"impl Freeze for CLI","synthetic":true,"types":[]},{"text":"impl Freeze for DaemonOpts","synthetic":true,"types":[]},{"text":"impl Freeze for Subcommand","synthetic":true,"types":[]},{"text":"impl Freeze for AuthCommands","synthetic":true,"types":[]},{"text":"impl Freeze for ChainCommands","synthetic":true,"types":[]},{"text":"impl Freeze for Config","synthetic":true,"types":[]},{"text":"impl Freeze for FetchCommands","synthetic":true,"types":[]},{"text":"impl Freeze for GenesisCommands","synthetic":true,"types":[]}];
implementors["forest_actor"] = [{"text":"impl Freeze for SYSTEM_ACTOR_CODE_ID","synthetic":true,"types":[]},{"text":"impl Freeze for INIT_ACTOR_CODE_ID","synthetic":true,"types":[]},{"text":"impl Freeze for CRON_ACTOR_CODE_ID","synthetic":true,"types":[]},{"text":"impl Freeze for ACCOUNT_ACTOR_CODE_ID","synthetic":true,"types":[]},{"text":"impl Freeze for POWER_ACTOR_CODE_ID","synthetic":true,"types":[]},{"text":"impl Freeze for MINER_ACTOR_CODE_ID","synthetic":true,"types":[]},{"text":"impl Freeze for MARKET_ACTOR_CODE_ID","synthetic":true,"types":[]},{"text":"impl Freeze for PAYCH_ACTOR_CODE_ID","synthetic":true,"types":[]},{"text":"impl Freeze for MULTISIG_ACTOR_CODE_ID","synthetic":true,"types":[]},{"text":"impl Freeze for REWARD_ACTOR_CODE_ID","synthetic":true,"types":[]},{"text":"impl Freeze for VERIFREG_ACTOR_CODE_ID","synthetic":true,"types":[]},{"text":"impl Freeze for CHAOS_ACTOR_CODE_ID","synthetic":true,"types":[]},{"text":"impl Freeze for CALLER_TYPES_SIGNABLE","synthetic":true,"types":[]},{"text":"impl Freeze for QUALITY_BASE_MULTIPLIER","synthetic":true,"types":[]},{"text":"impl Freeze for DEAL_WEIGHT_MULTIPLIER","synthetic":true,"types":[]},{"text":"impl Freeze for VERIFIED_DEAL_WEIGHT_MULTIPLIER","synthetic":true,"types":[]},{"text":"impl Freeze for SYSTEM_ACTOR_ADDR","synthetic":true,"types":[]},{"text":"impl Freeze for INIT_ACTOR_ADDR","synthetic":true,"types":[]},{"text":"impl Freeze for REWARD_ACTOR_ADDR","synthetic":true,"types":[]},{"text":"impl Freeze for CRON_ACTOR_ADDR","synthetic":true,"types":[]},{"text":"impl Freeze for STORAGE_POWER_ACTOR_ADDR","synthetic":true,"types":[]},{"text":"impl Freeze for STORAGE_MARKET_ACTOR_ADDR","synthetic":true,"types":[]},{"text":"impl Freeze for VERIFIED_REGISTRY_ACTOR_ADDR","synthetic":true,"types":[]},{"text":"impl Freeze for CHAOS_ACTOR_ADDR","synthetic":true,"types":[]},{"text":"impl Freeze for BURNT_FUNDS_ACTOR_ADDR","synthetic":true,"types":[]},{"text":"impl Freeze for RESERVE_ADDRESS","synthetic":true,"types":[]},{"text":"impl Freeze for Actor","synthetic":true,"types":[]},{"text":"impl Freeze for Method","synthetic":true,"types":[]},{"text":"impl Freeze for State","synthetic":true,"types":[]},{"text":"impl Freeze for ConstructorParams","synthetic":true,"types":[]},{"text":"impl Freeze for Actor","synthetic":true,"types":[]},{"text":"impl Freeze for Method","synthetic":true,"types":[]},{"text":"impl Freeze for State","synthetic":true,"types":[]},{"text":"impl Freeze for Entry","synthetic":true,"types":[]},{"text":"impl Freeze for Actor","synthetic":true,"types":[]},{"text":"impl Freeze for Method","synthetic":true,"types":[]},{"text":"impl Freeze for State","synthetic":true,"types":[]},{"text":"impl Freeze for ConstructorParams","synthetic":true,"types":[]},{"text":"impl Freeze for ExecParams","synthetic":true,"types":[]},{"text":"impl Freeze for ExecReturn","synthetic":true,"types":[]},{"text":"impl Freeze for Actor","synthetic":true,"types":[]},{"text":"impl Freeze for Method","synthetic":true,"types":[]},{"text":"impl Freeze for DealProposal","synthetic":true,"types":[]},{"text":"impl Freeze for ClientDealProposal","synthetic":true,"types":[]},{"text":"impl Freeze for DealState","synthetic":true,"types":[]},{"text":"impl Freeze for State","synthetic":true,"types":[]},{"text":"impl Freeze for WithdrawBalanceParams","synthetic":true,"types":[]},{"text":"impl Freeze for OnMinerSectorsTerminateParams","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for OnMinerSectorsTerminateParamsRef&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for PublishStorageDealsParams","synthetic":true,"types":[]},{"text":"impl Freeze for PublishStorageDealsReturn","synthetic":true,"types":[]},{"text":"impl Freeze for VerifyDealsForActivationParams","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for VerifyDealsForActivationParamsRef&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for VerifyDealsForActivationReturn","synthetic":true,"types":[]},{"text":"impl Freeze for ActivateDealsParams","synthetic":true,"types":[]},{"text":"impl Freeze for ComputeDataCommitmentParams","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for ComputeDataCommitmentParamsRef&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Actor","synthetic":true,"types":[]},{"text":"impl Freeze for Method","synthetic":true,"types":[]},{"text":"impl&lt;'db, BS&gt; !Freeze for BitFieldQueue&lt;'db, BS&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Deadlines","synthetic":true,"types":[]},{"text":"impl Freeze for Deadline","synthetic":true,"types":[]},{"text":"impl Freeze for PoStResult","synthetic":true,"types":[]},{"text":"impl Freeze for ExpirationSet","synthetic":true,"types":[]},{"text":"impl&lt;'db, BS&gt; !Freeze for ExpirationQueue&lt;'db, BS&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Partition","synthetic":true,"types":[]},{"text":"impl Freeze for PowerPair","synthetic":true,"types":[]},{"text":"impl Freeze for VestSpec","synthetic":true,"types":[]},{"text":"impl Freeze for DeadlineSectorMap","synthetic":true,"types":[]},{"text":"impl Freeze for PartitionSectorMap","synthetic":true,"types":[]},{"text":"impl&lt;'db, BS&gt; !Freeze for Sectors&lt;'db, BS&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for State","synthetic":true,"types":[]},{"text":"impl Freeze for MinerInfo","synthetic":true,"types":[]},{"text":"impl Freeze for TerminationResult","synthetic":true,"types":[]},{"text":"impl Freeze for MinerConstructorParams","synthetic":true,"types":[]},{"text":"impl Freeze for CronEventPayload","synthetic":true,"types":[]},{"text":"impl Freeze for PartitionKey","synthetic":true,"types":[]},{"text":"impl Freeze for GetControlAddressesReturn","synthetic":true,"types":[]},{"text":"impl Freeze for ChangeWorkerAddressParams","synthetic":true,"types":[]},{"text":"impl Freeze for ChangePeerIDParams","synthetic":true,"types":[]},{"text":"impl Freeze for ChangeMultiaddrsParams","synthetic":true,"types":[]},{"text":"impl Freeze for ConfirmSectorProofsParams","synthetic":true,"types":[]},{"text":"impl Freeze for PoStPartition","synthetic":true,"types":[]},{"text":"impl Freeze for SubmitWindowedPoStParams","synthetic":true,"types":[]},{"text":"impl Freeze for ProveCommitSectorParams","synthetic":true,"types":[]},{"text":"impl Freeze for CheckSectorProvenParams","synthetic":true,"types":[]},{"text":"impl Freeze for ExtendSectorExpirationParams","synthetic":true,"types":[]},{"text":"impl Freeze for ExpirationExtension","synthetic":true,"types":[]},{"text":"impl Freeze for TerminateSectorsParams","synthetic":true,"types":[]},{"text":"impl Freeze for TerminationDeclaration","synthetic":true,"types":[]},{"text":"impl Freeze for TerminateSectorsReturn","synthetic":true,"types":[]},{"text":"impl Freeze for DeclareFaultsParams","synthetic":true,"types":[]},{"text":"impl Freeze for FaultDeclaration","synthetic":true,"types":[]},{"text":"impl Freeze for DeclareFaultsRecoveredParams","synthetic":true,"types":[]},{"text":"impl Freeze for RecoveryDeclaration","synthetic":true,"types":[]},{"text":"impl Freeze for CompactPartitionsParams","synthetic":true,"types":[]},{"text":"impl Freeze for CompactSectorNumbersParams","synthetic":true,"types":[]},{"text":"impl Freeze for ReportConsensusFaultParams","synthetic":true,"types":[]},{"text":"impl Freeze for WithdrawBalanceParams","synthetic":true,"types":[]},{"text":"impl Freeze for WorkerKeyChange","synthetic":true,"types":[]},{"text":"impl Freeze for SectorPreCommitInfo","synthetic":true,"types":[]},{"text":"impl Freeze for SectorPreCommitOnChainInfo","synthetic":true,"types":[]},{"text":"impl Freeze for SectorOnChainInfo","synthetic":true,"types":[]},{"text":"impl Freeze for ChainSectorInfo","synthetic":true,"types":[]},{"text":"impl Freeze for Fault","synthetic":true,"types":[]},{"text":"impl Freeze for ApplyRewardParams","synthetic":true,"types":[]},{"text":"impl Freeze for VestingFund","synthetic":true,"types":[]},{"text":"impl Freeze for VestingFunds","synthetic":true,"types":[]},{"text":"impl Freeze for Actor","synthetic":true,"types":[]},{"text":"impl Freeze for Method","synthetic":true,"types":[]},{"text":"impl Freeze for State","synthetic":true,"types":[]},{"text":"impl Freeze for TxnID","synthetic":true,"types":[]},{"text":"impl Freeze for Transaction","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for ProposalHashData&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for ConstructorParams","synthetic":true,"types":[]},{"text":"impl Freeze for ProposeParams","synthetic":true,"types":[]},{"text":"impl Freeze for ProposeReturn","synthetic":true,"types":[]},{"text":"impl Freeze for TxnIDParams","synthetic":true,"types":[]},{"text":"impl Freeze for ApproveReturn","synthetic":true,"types":[]},{"text":"impl Freeze for AddSignerParams","synthetic":true,"types":[]},{"text":"impl Freeze for RemoveSignerParams","synthetic":true,"types":[]},{"text":"impl Freeze for SwapSignerParams","synthetic":true,"types":[]},{"text":"impl Freeze for ChangeNumApprovalsThresholdParams","synthetic":true,"types":[]},{"text":"impl Freeze for LockBalanceParams","synthetic":true,"types":[]},{"text":"impl Freeze for Actor","synthetic":true,"types":[]},{"text":"impl Freeze for Method","synthetic":true,"types":[]},{"text":"impl Freeze for State","synthetic":true,"types":[]},{"text":"impl Freeze for LaneState","synthetic":true,"types":[]},{"text":"impl Freeze for Merge","synthetic":true,"types":[]},{"text":"impl Freeze for ConstructorParams","synthetic":true,"types":[]},{"text":"impl Freeze for SignedVoucher","synthetic":true,"types":[]},{"text":"impl Freeze for ModVerifyParams","synthetic":true,"types":[]},{"text":"impl Freeze for PaymentVerifyParams","synthetic":true,"types":[]},{"text":"impl Freeze for UpdateChannelStateParams","synthetic":true,"types":[]},{"text":"impl Freeze for Actor","synthetic":true,"types":[]},{"text":"impl Freeze for Method","synthetic":true,"types":[]},{"text":"impl Freeze for State","synthetic":true,"types":[]},{"text":"impl Freeze for Claim","synthetic":true,"types":[]},{"text":"impl Freeze for CronEvent","synthetic":true,"types":[]},{"text":"impl Freeze for CreateMinerParams","synthetic":true,"types":[]},{"text":"impl Freeze for CreateMinerReturn","synthetic":true,"types":[]},{"text":"impl Freeze for UpdateClaimedPowerParams","synthetic":true,"types":[]},{"text":"impl Freeze for EnrollCronEventParams","synthetic":true,"types":[]},{"text":"impl Freeze for CurrentTotalPowerReturn","synthetic":true,"types":[]},{"text":"impl Freeze for Actor","synthetic":true,"types":[]},{"text":"impl Freeze for Method","synthetic":true,"types":[]},{"text":"impl Freeze for BASELINE_EXPONENT","synthetic":true,"types":[]},{"text":"impl Freeze for BASELINE_INITIAL_VALUE","synthetic":true,"types":[]},{"text":"impl Freeze for INIT_BASELINE_POWER","synthetic":true,"types":[]},{"text":"impl Freeze for State","synthetic":true,"types":[]},{"text":"impl Freeze for Reward","synthetic":true,"types":[]},{"text":"impl Freeze for VestingFunction","synthetic":true,"types":[]},{"text":"impl Freeze for AwardBlockRewardParams","synthetic":true,"types":[]},{"text":"impl Freeze for ThisEpochRewardReturn","synthetic":true,"types":[]},{"text":"impl Freeze for State","synthetic":true,"types":[]},{"text":"impl Freeze for Actor","synthetic":true,"types":[]},{"text":"impl Freeze for Method","synthetic":true,"types":[]},{"text":"impl Freeze for Actor","synthetic":true,"types":[]},{"text":"impl Freeze for Method","synthetic":true,"types":[]},{"text":"impl Freeze for State","synthetic":true,"types":[]},{"text":"impl Freeze for MINIMUM_VERIFIED_DEAL_SIZE","synthetic":true,"types":[]},{"text":"impl Freeze for VerifierParams","synthetic":true,"types":[]},{"text":"impl Freeze for BytesParams","synthetic":true,"types":[]},{"text":"impl&lt;'a, BS&gt; Freeze for BalanceTable&lt;'a, BS&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, BS&gt; Freeze for Multimap&lt;'a, BS&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, BS&gt; Freeze for Set&lt;'a, BS&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, BS&gt; Freeze for SetMultimap&lt;'a, BS&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for State","synthetic":true,"types":[]},{"text":"impl Freeze for CreateActorArgs","synthetic":true,"types":[]},{"text":"impl Freeze for ResolveAddressResponse","synthetic":true,"types":[]},{"text":"impl Freeze for SendArgs","synthetic":true,"types":[]},{"text":"impl Freeze for SendReturn","synthetic":true,"types":[]},{"text":"impl Freeze for MutateStateArgs","synthetic":true,"types":[]},{"text":"impl Freeze for AbortWithArgs","synthetic":true,"types":[]},{"text":"impl Freeze for InspectRuntimeReturn","synthetic":true,"types":[]},{"text":"impl Freeze for CallerValidationArgs","synthetic":true,"types":[]},{"text":"impl Freeze for Actor","synthetic":true,"types":[]},{"text":"impl Freeze for Method","synthetic":true,"types":[]},{"text":"impl Freeze for FilterEstimate","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b, 'f&gt; Freeze for AlphaBetaFilter&lt;'a, 'b, 'f&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for NUM","synthetic":true,"types":[]},{"text":"impl Freeze for DENOM","synthetic":true,"types":[]},{"text":"impl Freeze for DEFAULT_ALPHA","synthetic":true,"types":[]},{"text":"impl Freeze for DEFAULT_BETA","synthetic":true,"types":[]},{"text":"impl Freeze for LN_2","synthetic":true,"types":[]},{"text":"impl Freeze for EPSILON","synthetic":true,"types":[]}];
implementors["forest_address"] = [{"text":"impl Freeze for BLSPublicKey","synthetic":true,"types":[]},{"text":"impl Freeze for Address","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for Network","synthetic":true,"types":[]},{"text":"impl Freeze for Payload","synthetic":true,"types":[]},{"text":"impl Freeze for Protocol","synthetic":true,"types":[]},{"text":"impl Freeze for AddressJson","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for AddressJsonRef&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for AddressJsonVec","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for AddressJsonSlice&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["forest_bigint"] = [{"text":"impl&lt;'a&gt; Freeze for BigIntSer&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for BigIntDe","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for BigUintSer&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for BigUintDe","synthetic":true,"types":[]}];
implementors["forest_bitfield"] = [{"text":"impl Freeze for BitField","synthetic":true,"types":[]},{"text":"impl Freeze for UnvalidatedBitField","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for Skip&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for Take&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for Ranges&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for BitFieldJson","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for BitFieldJsonRef&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["forest_blocks"] = [{"text":"impl Freeze for Block","synthetic":true,"types":[]},{"text":"impl Freeze for TxMeta","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for ElectionProof","synthetic":true,"types":[]},{"text":"impl Freeze for ElectionProofJson","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for ElectionProofJsonRef&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for GossipBlock","synthetic":true,"types":[]},{"text":"impl Freeze for GossipBlockJson","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for GossipBlockJsonRef&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for BlockHeader","synthetic":true,"types":[]},{"text":"impl Freeze for BlockHeaderBuilder","synthetic":true,"types":[]},{"text":"impl Freeze for BlockHeaderJson","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for BlockHeaderJsonRef&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Ticket","synthetic":true,"types":[]},{"text":"impl Freeze for EPostTicket","synthetic":true,"types":[]},{"text":"impl Freeze for EPostProof","synthetic":true,"types":[]},{"text":"impl Freeze for TicketJson","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for TicketJsonRef&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for TipsetKeys","synthetic":true,"types":[]},{"text":"impl Freeze for Tipset","synthetic":true,"types":[]},{"text":"impl Freeze for FullTipset","synthetic":true,"types":[]},{"text":"impl Freeze for TipsetKeysJson","synthetic":true,"types":[]},{"text":"impl Freeze for TipsetJson","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for TipsetJsonRef&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["forest_car"] = [{"text":"impl Freeze for CarHeader","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for CarReader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Block","synthetic":true,"types":[]}];
implementors["forest_cid"] = [{"text":"impl Freeze for Prefix","synthetic":true,"types":[]},{"text":"impl Freeze for Cid","synthetic":true,"types":[]},{"text":"impl Freeze for Code","synthetic":true,"types":[]},{"text":"impl Freeze for CidJson","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for CidJsonRef&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for CidJsonVec","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for CidJsonSlice&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["forest_crypto"] = [{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for DomainSeparationTag","synthetic":true,"types":[]},{"text":"impl Freeze for Signature","synthetic":true,"types":[]},{"text":"impl Freeze for SignatureType","synthetic":true,"types":[]},{"text":"impl Freeze for SignatureJson","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for SignatureJsonRef&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for SignatureTypeJson","synthetic":true,"types":[]},{"text":"impl Freeze for VRFProof","synthetic":true,"types":[]}];
implementors["forest_encoding"] = [{"text":"impl&lt;'a&gt; Freeze for BytesSer&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for BytesDe","synthetic":true,"types":[]},{"text":"impl Freeze for Byte32De","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for CodecProtocol","synthetic":true,"types":[]}];
implementors["forest_hash_utils"] = [{"text":"impl Freeze for BytesKey","synthetic":true,"types":[]}];
implementors["forest_ipld"] = [{"text":"impl Freeze for Path","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for PathSegment","synthetic":true,"types":[]},{"text":"impl Freeze for Ipld","synthetic":true,"types":[]},{"text":"impl&lt;L&gt; Freeze for Progress&lt;L&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;L: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for LastBlockInfo","synthetic":true,"types":[]},{"text":"impl Freeze for VisitReason","synthetic":true,"types":[]},{"text":"impl Freeze for Selector","synthetic":true,"types":[]},{"text":"impl Freeze for RecursionLimit","synthetic":true,"types":[]},{"text":"impl Freeze for Condition","synthetic":true,"types":[]},{"text":"impl Freeze for IpldJson","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for IpldJsonRef&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["forest_json_utils"] = [{"text":"impl&lt;T, D&gt; Freeze for GoVecVisitor&lt;T, D&gt;","synthetic":true,"types":[]}];
implementors["forest_libp2p"] = [{"text":"impl Freeze for ForestBehaviour","synthetic":true,"types":[]},{"text":"impl Freeze for ChainExchangeRequest","synthetic":true,"types":[]},{"text":"impl Freeze for Libp2pConfig","synthetic":true,"types":[]},{"text":"impl Freeze for PUBSUB_BLOCK_TOPIC","synthetic":true,"types":[]},{"text":"impl Freeze for PUBSUB_MSG_TOPIC","synthetic":true,"types":[]},{"text":"impl&lt;DB&gt; !Freeze for Libp2pService&lt;DB&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for ForestBehaviourEvent","synthetic":true,"types":[]},{"text":"impl Freeze for NetworkEvent","synthetic":true,"types":[]},{"text":"impl Freeze for PubsubMessage","synthetic":true,"types":[]},{"text":"impl Freeze for NetworkMessage","synthetic":true,"types":[]},{"text":"impl Freeze for NetRPCMethods","synthetic":true,"types":[]},{"text":"impl Freeze for ChainExchangeResponse","synthetic":true,"types":[]},{"text":"impl Freeze for CompactedMessages","synthetic":true,"types":[]},{"text":"impl Freeze for TipsetBundle","synthetic":true,"types":[]},{"text":"impl Freeze for ChainExchangeProtocolName","synthetic":true,"types":[]},{"text":"impl Freeze for ChainExchangeResponseStatus","synthetic":true,"types":[]},{"text":"impl Freeze for HelloRequest","synthetic":true,"types":[]},{"text":"impl Freeze for HelloResponse","synthetic":true,"types":[]},{"text":"impl Freeze for HelloProtocolName","synthetic":true,"types":[]},{"text":"impl&lt;P, RQ, RS&gt; Freeze for CborRequestResponse&lt;P, RQ, RS&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for RPCResponse","synthetic":true,"types":[]},{"text":"impl Freeze for RPCRequest","synthetic":true,"types":[]}];
implementors["forest_message"] = [{"text":"impl Freeze for ChainMessage","synthetic":true,"types":[]},{"text":"impl Freeze for MessageReceipt","synthetic":true,"types":[]},{"text":"impl Freeze for MessageReceiptJson","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for MessageReceiptJsonRef&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for SignedMessage","synthetic":true,"types":[]},{"text":"impl Freeze for SignedMessageJson","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for SignedMessageJsonRef&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for UnsignedMessage","synthetic":true,"types":[]},{"text":"impl Freeze for MessageBuilder","synthetic":true,"types":[]},{"text":"impl Freeze for UnsignedMessageJson","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for UnsignedMessageJsonRef&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["forest_runtime"] = [{"text":"impl Freeze for ConsensusFault","synthetic":true,"types":[]},{"text":"impl Freeze for ConsensusFaultType","synthetic":true,"types":[]}];
implementors["forest_vm"] = [{"text":"impl Freeze for ActorState","synthetic":true,"types":[]},{"text":"impl Freeze for ActorError","synthetic":true,"types":[]},{"text":"impl Freeze for InvocInput","synthetic":true,"types":[]},{"text":"impl Freeze for Serialized","synthetic":true,"types":[]},{"text":"impl Freeze for EMPTY_ARR_BYTES","synthetic":true,"types":[]},{"text":"impl Freeze for EMPTY_ARR_CID","synthetic":true,"types":[]},{"text":"impl Freeze for ExitCode","synthetic":true,"types":[]},{"text":"impl Freeze for ActorStateJson","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for ActorStateJsonRef&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["interpreter"] = [{"text":"impl&lt;'db, 'vm, BS, R, C, LB, V, P&gt; Freeze for DefaultRuntime&lt;'db, 'vm, BS, R, C, LB, V, P&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for GasCharge","synthetic":true,"types":[]},{"text":"impl Freeze for PriceList","synthetic":true,"types":[]},{"text":"impl Freeze for BlockMessages","synthetic":true,"types":[]},{"text":"impl&lt;'db, 'r, DB, R, N, C, LB, V, P&gt; Freeze for VM&lt;'db, 'r, DB, R, N, C, LB, V, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for ApplyRet","synthetic":true,"types":[]}];
implementors["ipld_amt"] = [{"text":"impl&lt;'db, V, BS&gt; !Freeze for Amt&lt;'db, V, BS&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for BitMap","synthetic":true,"types":[]},{"text":"impl&lt;'a, V&gt; Freeze for ValueMut&lt;'a, V&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]}];
implementors["ipld_blockstore"] = [{"text":"impl&lt;'bs, BS&gt; !Freeze for BufferedBlockStore&lt;'bs, BS&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for BSStats","synthetic":true,"types":[]},{"text":"impl&lt;'bs, BS&gt; !Freeze for TrackingBlockStore&lt;'bs, BS&gt;","synthetic":true,"types":[]}];
implementors["ipld_hamt"] = [{"text":"impl&lt;'a, BS, V, K, H&gt; Freeze for Hamt&lt;'a, BS, V, K, H&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for Sha256","synthetic":true,"types":[]},{"text":"impl Freeze for Identity","synthetic":true,"types":[]}];
implementors["key_management"] = [{"text":"impl Freeze for KeyInfo","synthetic":true,"types":[]},{"text":"impl Freeze for MemKeyStore","synthetic":true,"types":[]},{"text":"impl Freeze for PersistentKeyStore","synthetic":true,"types":[]},{"text":"impl Freeze for Key","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Wallet&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for KeyInfoJson","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for KeyInfoJsonRef&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["message_pool"] = [{"text":"impl Freeze for MpoolConfig","synthetic":true,"types":[]},{"text":"impl Freeze for MsgSet","synthetic":true,"types":[]},{"text":"impl&lt;DB&gt; Freeze for MpoolRpcProvider&lt;DB&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for MessagePool&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for TestApi","synthetic":true,"types":[]}];
implementors["net_utils"] = [{"text":"impl&lt;R, W&gt; Freeze for FetchProgress&lt;R, W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["paramfetch"] = [{"text":"impl Freeze for SectorSizeOpt","synthetic":true,"types":[]}];
implementors["rpc"] = [{"text":"impl&lt;DB, KS, B&gt; Freeze for RpcState&lt;DB, KS, B&gt;","synthetic":true,"types":[]}];
implementors["rpc_client"] = [{"text":"impl&lt;'a, R, I&gt; Freeze for Filecoin&lt;'a, R, I&gt;","synthetic":true,"types":[]}];
implementors["state_manager"] = [{"text":"impl Freeze for InvocResult","synthetic":true,"types":[]},{"text":"impl Freeze for MarketBalance","synthetic":true,"types":[]},{"text":"impl&lt;DB&gt; !Freeze for StateManager&lt;DB&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for MiningBaseInfo","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for Deadline","synthetic":true,"types":[]}];
implementors["state_tree"] = [{"text":"impl&lt;'db, S&gt; Freeze for StateTree&lt;'db, S&gt;","synthetic":true,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()