(function() {var implementors = {};
implementors["actor_interface"] = [{"text":"impl From&lt;DealProposal&gt; for DealProposal","synthetic":false,"types":[]},{"text":"impl From&lt;DealProposal&gt; for DealProposal","synthetic":false,"types":[]},{"text":"impl From&lt;DealState&gt; for DealState","synthetic":false,"types":[]},{"text":"impl From&lt;DealState&gt; for DealState","synthetic":false,"types":[]},{"text":"impl From&lt;SectorOnChainInfo&gt; for SectorOnChainInfo","synthetic":false,"types":[]},{"text":"impl From&lt;SectorOnChainInfo&gt; for SectorOnChainInfo","synthetic":false,"types":[]},{"text":"impl From&lt;SectorPreCommitOnChainInfo&gt; for SectorPreCommitOnChainInfo","synthetic":false,"types":[]},{"text":"impl From&lt;SectorPreCommitOnChainInfo&gt; for SectorPreCommitOnChainInfo","synthetic":false,"types":[]},{"text":"impl From&lt;SectorPreCommitInfo&gt; for SectorPreCommitInfo","synthetic":false,"types":[]},{"text":"impl From&lt;SectorPreCommitInfo&gt; for SectorPreCommitInfo","synthetic":false,"types":[]},{"text":"impl From&lt;Claim&gt; for Claim","synthetic":false,"types":[]},{"text":"impl From&lt;Claim&gt; for Claim","synthetic":false,"types":[]},{"text":"impl From&lt;FilterEstimate&gt; for FilterEstimate","synthetic":false,"types":[]},{"text":"impl From&lt;FilterEstimate&gt; for FilterEstimate","synthetic":false,"types":[]},{"text":"impl From&lt;NetworkVersion&gt; for ActorVersion","synthetic":false,"types":[]},{"text":"impl From&lt;StateTreeVersion&gt; for ActorVersion","synthetic":false,"types":[]}];
implementors["beacon"] = [{"text":"impl From&lt;BeaconEntryJson&gt; for BeaconEntry","synthetic":false,"types":[]}];
implementors["chain"] = [{"text":"impl&lt;'a&gt; From&lt;&amp;'a HeadChange&gt; for HeadChangeJson&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl From&lt;Error&gt; for Error","synthetic":false,"types":[]},{"text":"impl From&lt;Error&gt; for Error","synthetic":false,"types":[]},{"text":"impl From&lt;Error&gt; for Error","synthetic":false,"types":[]},{"text":"impl From&lt;Error&gt; for Error","synthetic":false,"types":[]},{"text":"impl From&lt;Error&gt; for Error","synthetic":false,"types":[]},{"text":"impl From&lt;Error&gt; for Error","synthetic":false,"types":[]},{"text":"impl From&lt;String&gt; for Error","synthetic":false,"types":[]},{"text":"impl From&lt;Box&lt;dyn Error + 'static&gt;&gt; for Error","synthetic":false,"types":[]}];
implementors["chain_sync"] = [{"text":"impl From&lt;Error&gt; for Error","synthetic":false,"types":[]},{"text":"impl From&lt;Error&gt; for Error","synthetic":false,"types":[]},{"text":"impl From&lt;Error&gt; for Error","synthetic":false,"types":[]},{"text":"impl From&lt;Error&gt; for Error","synthetic":false,"types":[]},{"text":"impl From&lt;Error&gt; for Error","synthetic":false,"types":[]},{"text":"impl From&lt;Error&gt; for Error","synthetic":false,"types":[]},{"text":"impl From&lt;Error&gt; for Error","synthetic":false,"types":[]},{"text":"impl From&lt;Error&gt; for Error","synthetic":false,"types":[]},{"text":"impl From&lt;Error&gt; for Error","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; From&lt;&amp;'_ str&gt; for Error","synthetic":false,"types":[]},{"text":"impl From&lt;String&gt; for Error","synthetic":false,"types":[]},{"text":"impl From&lt;TryFromIntError&gt; for Error","synthetic":false,"types":[]}];
implementors["fil_types"] = [{"text":"impl From&lt;UnpaddedPieceSize&gt; for UnpaddedBytesAmount","synthetic":false,"types":[]},{"text":"impl From&lt;SectorInfo&gt; for SectorInfoJson","synthetic":false,"types":[]},{"text":"impl From&lt;PoStProofJson&gt; for PoStProof","synthetic":false,"types":[]},{"text":"impl From&lt;i64&gt; for RegisteredPoStProof","synthetic":false,"types":[]},{"text":"impl From&lt;RegisteredPoStProof&gt; for i64","synthetic":false,"types":[]},{"text":"impl From&lt;i64&gt; for RegisteredSealProof","synthetic":false,"types":[]},{"text":"impl From&lt;RegisteredSealProof&gt; for i64","synthetic":false,"types":[]},{"text":"impl From&lt;SectorSize&gt; for RegisteredSealProof","synthetic":false,"types":[]}];
implementors["forest_actor"] = [{"text":"impl From&lt;SignedVoucher&gt; for UpdateChannelStateParams","synthetic":false,"types":[]}];
implementors["forest_address"] = [{"text":"impl From&lt;DecodeError&gt; for Error","synthetic":false,"types":[]},{"text":"impl From&lt;ParseIntError&gt; for Error","synthetic":false,"types":[]},{"text":"impl From&lt;Error&gt; for Error","synthetic":false,"types":[]},{"text":"impl From&lt;Error&gt; for Error","synthetic":false,"types":[]},{"text":"impl From&lt;[u8; 48]&gt; for BLSPublicKey","synthetic":false,"types":[]},{"text":"impl From&lt;Payload&gt; for Protocol","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; From&lt;&amp;'_ Payload&gt; for Protocol","synthetic":false,"types":[]},{"text":"impl From&lt;Address&gt; for AddressJson","synthetic":false,"types":[]},{"text":"impl From&lt;AddressJson&gt; for Address","synthetic":false,"types":[]}];
implementors["forest_bitfield"] = [{"text":"impl From&lt;BitField&gt; for UnvalidatedBitField","synthetic":false,"types":[]},{"text":"impl From&lt;BitFieldJson&gt; for BitField","synthetic":false,"types":[]},{"text":"impl From&lt;BitField&gt; for BitFieldJson","synthetic":false,"types":[]}];
implementors["forest_blocks"] = [{"text":"impl From&lt;SystemTimeError&gt; for Error","synthetic":false,"types":[]},{"text":"impl From&lt;BlockHeaderJson&gt; for BlockHeader","synthetic":false,"types":[]},{"text":"impl From&lt;FullTipset&gt; for Tipset","synthetic":false,"types":[]},{"text":"impl From&lt;TipsetKeysJson&gt; for TipsetKeys","synthetic":false,"types":[]},{"text":"impl From&lt;TipsetKeys&gt; for TipsetKeysJson","synthetic":false,"types":[]},{"text":"impl From&lt;TipsetJson&gt; for Arc&lt;Tipset&gt;","synthetic":false,"types":[]},{"text":"impl From&lt;Arc&lt;Tipset&gt;&gt; for TipsetJson","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;&amp;'a Tipset&gt; for TipsetJsonRef&lt;'a&gt;","synthetic":false,"types":[]}];
implementors["forest_car"] = [{"text":"impl From&lt;Vec&lt;Cid&gt;&gt; for CarHeader","synthetic":false,"types":[]}];
implementors["forest_cid"] = [{"text":"impl From&lt;Code&gt; for u64","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; From&lt;&amp;'_ Blake2bDigest&lt;UInt&lt;UInt&lt;UInt&lt;UInt&lt;UInt&lt;UInt&lt;UTerm, B1&gt;, B0&gt;, B0&gt;, B0&gt;, B0&gt;, B0&gt;&gt;&gt; for Code","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; From&lt;&amp;'_ IdentityDigest&lt;UInt&lt;UInt&lt;UInt&lt;UInt&lt;UInt&lt;UInt&lt;UTerm, B1&gt;, B0&gt;, B0&gt;, B0&gt;, B0&gt;, B0&gt;&gt;&gt; for Code","synthetic":false,"types":[]},{"text":"impl From&lt;Cid&gt; for Prefix","synthetic":false,"types":[]},{"text":"impl From&lt;CidJson&gt; for Cid","synthetic":false,"types":[]}];
implementors["forest_crypto"] = [{"text":"impl From&lt;Error&gt; for Error","synthetic":false,"types":[]},{"text":"impl From&lt;Box&lt;dyn Error + 'static&gt;&gt; for Error","synthetic":false,"types":[]},{"text":"impl From&lt;Error&gt; for Error","synthetic":false,"types":[]},{"text":"impl From&lt;Error&gt; for Error","synthetic":false,"types":[]}];
implementors["forest_encoding"] = [{"text":"impl From&lt;Error&gt; for Error","synthetic":false,"types":[]},{"text":"impl From&lt;Error&gt; for Error","synthetic":false,"types":[]},{"text":"impl From&lt;Error&gt; for Error","synthetic":false,"types":[]}];
implementors["forest_hash_utils"] = [{"text":"impl From&lt;Vec&lt;u8&gt;&gt; for BytesKey","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; From&lt;&amp;'_ [u8]&gt; for BytesKey","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; From&lt;&amp;'_ str&gt; for BytesKey","synthetic":false,"types":[]}];
implementors["forest_ipld"] = [{"text":"impl From&lt;Error&gt; for Error","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; From&lt;&amp;'_ str&gt; for Path","synthetic":false,"types":[]},{"text":"impl From&lt;usize&gt; for PathSegment","synthetic":false,"types":[]},{"text":"impl From&lt;String&gt; for PathSegment","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; From&lt;&amp;'_ str&gt; for PathSegment","synthetic":false,"types":[]}];
implementors["forest_message"] = [{"text":"impl From&lt;MessageReceiptJson&gt; for MessageReceipt","synthetic":false,"types":[]},{"text":"impl From&lt;MessageReceipt&gt; for MessageReceiptJson","synthetic":false,"types":[]},{"text":"impl From&lt;SignedMessageJson&gt; for SignedMessage","synthetic":false,"types":[]},{"text":"impl From&lt;SignedMessage&gt; for SignedMessageJson","synthetic":false,"types":[]},{"text":"impl From&lt;UnsignedMessageJson&gt; for UnsignedMessage","synthetic":false,"types":[]},{"text":"impl From&lt;UnsignedMessage&gt; for UnsignedMessageJson","synthetic":false,"types":[]}];
implementors["forest_vm"] = [{"text":"impl From&lt;ActorStateJson&gt; for ActorState","synthetic":false,"types":[]},{"text":"impl From&lt;Error&gt; for ActorError","synthetic":false,"types":[]},{"text":"impl From&lt;Error&gt; for ActorError","synthetic":false,"types":[]}];
implementors["ipld_amt"] = [{"text":"impl From&lt;Error&gt; for Error","synthetic":false,"types":[]},{"text":"impl From&lt;Error&gt; for Error","synthetic":false,"types":[]},{"text":"impl From&lt;Box&lt;dyn Error + 'static&gt;&gt; for Error","synthetic":false,"types":[]}];
implementors["ipld_hamt"] = [{"text":"impl From&lt;Error&gt; for Error","synthetic":false,"types":[]},{"text":"impl From&lt;Box&lt;dyn Error + 'static&gt;&gt; for Error","synthetic":false,"types":[]}];
implementors["key_management"] = [{"text":"impl From&lt;Error&gt; for Error","synthetic":false,"types":[]},{"text":"impl From&lt;KeyInfoJson&gt; for KeyInfo","synthetic":false,"types":[]}];
implementors["message_pool"] = [{"text":"impl From&lt;Error&gt; for Error","synthetic":false,"types":[]},{"text":"impl From&lt;Error&gt; for Error","synthetic":false,"types":[]}];
implementors["state_manager"] = [{"text":"impl From&lt;Error&gt; for Error","synthetic":false,"types":[]},{"text":"impl From&lt;String&gt; for Error","synthetic":false,"types":[]},{"text":"impl From&lt;Box&lt;dyn Error + 'static&gt;&gt; for Error","synthetic":false,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()