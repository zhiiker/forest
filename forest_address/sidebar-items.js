initSidebarItems({"constant":[["BLS_PUB_LEN","BLS public key length used for validation of BLS addresses."],["CHECKSUM_HASH_LEN","Length of the checksum hash for string encodings."],["PAYLOAD_HASH_LEN","Hash length of payload for Secp and Actor addresses."],["SECP_PUB_LEN","Uncompressed secp public key used for validation of Secp addresses."]],"enum":[["Error","Address error"],["Network","Network defines the preconfigured networks to use with address encoding"],["Payload","Payload is the data of the Address. Variants are the supported Address protocols."],["Protocol","Protocol defines the addressing protocol used to derive data to an address"]],"fn":[["checksum","Checksum calculates the 4 byte checksum hash"],["validate_checksum","Validates the checksum against the ingest data"]],"mod":[["json",""]],"struct":[["Address","Address is the struct that defines the protocol and data payload conversion from either a public key or value"],["BLSPublicKey","Public key struct used as BLS Address data. This type is only needed to be able to implement traits on it due to limitations on arrays within Rust that are greater than 32 length. Can be dereferenced into `[u8; 48]`."]]});